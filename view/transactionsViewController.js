/*
 * File: app/view/transactionsViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.9.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Vidly.view.transactionsViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.frmtransactions',
    requires: [
        'Vidly.store.rentals'
    ],
    init:function(application){
        this.control({
            "frmtransactions #btnAddMovies":{
                click: this.onBtnAddMoviesClick
            }
        })
    },
    config: {
        binding: {
            txtTransactionId: {
                value: '{current.intTransactionsId}'
            },
            txtCustomerName: {
                value: '{current.strFullName}'
            },

            cboCustomerName:{
                value:'{current.strFullName}',
                origValueField: 'intCustomersId',
                store: '{searchCustomers}'
            },

            grdRentedMovies: {
                colMovieName: {
                    dataIndex: 'strTitle'
                },
                colMoviePrice: {
                    dataIndex: 'dblMoviePrice'
                },
                colDateBorrowed: {
                    dataIndex: 'dtmDateRented'
                },
                colDateReturned: {
                    dataIndex: 'dtmDateReturned'
                },
                colIsReturned: {
                    dataIndex: 'ysnIsReturned'
                }
            },
            txtMovieName: {
                value: '{rentals.strTitle}'
            },
            txtRentalId: {
                value: '{rentals.intRentalsId}'
            },
            txtReturnedDate: {
                value: '{txtReturnedDate}'
            },
            txtPayment: {
                value: '{txtPayment}'
            }

        }
    },
    show: function (config) {
        "use strict";
        var me = this,
            win = me.getView(),
            action = config && config.action;

        if (action) {
            win.show();
            var context = me.setupContext();
            if (action == 'new') {
                context.data.addRecord();
            } else {
                context.data.load({
                    filters: config.filters
                })
            }
        }
    },

    setupContext: function () {
        "use strict";
        var me = this,
            win = me.getView();
        win.context = Ext.create('iRely.Engine', {
            window: win,
            store: Ext.create('Vidly.store.rentals', { pageSize: 1 }),
            binding: me.config.binding,
            details: [
                {
                    key: 'tblVIRentalsMovies',
                    lazy: true,
                    component: Ext.create('iRely.grid.Manager', {
                        grid: win.down('#grdRentedMovies')
                    })
                }
            ]
        });
        return win.context;
    },

    onGrdRentedMoviesSelect: function (grid, selecteItem, ewan) {
        var movieDetail = this.getView().getViewModel();
        movieDetail.set('rentals', selecteItem)
        console.log(movieDetail);
        if (selecteItem.data.ysnIsReturned == true) {
            Ext.first('#btnReturnMovies').setDisabled(true)
            movieDetail.set('txtPayment', selecteItem.data.dblPayment);
            movieDetail.set('txtReturnedDate', selecteItem.data.dtmDateReturned);
        } else {
            Ext.first('#btnReturnMovies').setDisabled(false)

            //payment computation
            var ReturnDate = new Date();
            var BorrowedDate = new Date(selecteItem.data.dtmDateRented);
            var diff = new Date(ReturnDate.getTime() - BorrowedDate.getTime());
            var DiffinDays = diff.getUTCDate() - 1;
            var moviePrice = (DiffinDays == 0 ? 1 : DiffinDays) * selecteItem.data.dblMoviePrice
            var discountedPrice = moviePrice - (moviePrice * ((selecteItem.data.dblDiscount == 0 ? 1 : selecteItem.data.dblDiscount) / 100));

            movieDetail.set('txtPayment', discountedPrice);
            movieDetail.set('txtReturnedDate', ReturnDate);
        }
        



    },

    onBtnReturnMoviesClick: function () {
        var store = Ext.first('grid').getStore();
        var vm = this.getView().getViewModel();
        var rentalId = Ext.first('#txtRentalId').getValue()
        //var store = vm.getStore();
        //Update the value in the grid
        vm.set('rentals.ysnIsReturned', true)
        vm.set('rentals.dtmDateReturned', new Date())

        //Update Data of Main Model for Update       
        // vm.set('current.ysnIsReturned', true)
        // vm.set('current.intRentalsId', rentalId)
        // vm.set('current.dtmDateReturned', new Date())

        // store.sync({
        //     callback:function(){
        //         store.load();
        //     }
        // })


    },
    onWindowClose: function () {
        var vm = this.getViewModel();
        vm.set('rentals', '')
        vm.set('txtPayment', '')
        vm.set('txtReturnedDate', '')


    },

    onBtnAddMoviesClick:function(button, e, eOpts){
        "use strict";
        var me = this;
        var win = button.up('window');
        var grid = Ext.first('#grdRentedMovies');

        var store = grid.getStore();
        
        console.log(store);

            iRely.Functions.openScreen('GlobalComponentEngine.view.FloatingSearch', {
                searchSettings: {
                    showNew: false,
                    title: 'Add Movies',
                    url: './Vidly/api/movies/getmovies',
                    columns: [
                        { dataIndex: 'intMoviesId', text: 'Movie Id', flex: 1, dataType: 'numeric', defaultSort: true, hidden: true, key: true },
                        { dataIndex: 'strTitle', text: 'Movie Title', flex: 1, dataType: 'string' },
                        { dataIndex: 'dblMoviePrice', text: 'Movie Price', flex: 1, dataType: 'number'}
                    ],
                    
                    type: 'Vidly.view.transactions',
                    openButtonText: 'Ok',
                    closeButtonText: 'Cancel',
                    showRefresh: false,
                    showExport: false,
                    hideLayoutButton: true
                },
                viewConfig: {
                    listeners: {
                        openselectedclick: function (button, e, result) {
                            Ext.each(result, function (screen) {
                                var newRecord = {
                                    //intMoviesId: win.getViewModel().get('current').get('intMoviesId'),
                                    intMoviesId: screen.data.intMoviesId,
                                    strTitle: screen.data.strTitle,
                                    dblMoviePrice: screen.data.dblMoviePrice
                                };
                                store.add(newRecord);
                            });
                            console.log(store)
                        },
                        scope: me
                    }
                }
            });

        
    }
});
